<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars &amp; global vars

randomize();

// TODO: some of these should probably be MACROs
global.surf = surface_create(room_width, room_height);
global.tilesize = 16;
global.player_grav = 0.05;
global.pad_num_free = 0;
global.respawn_time = 60;

enum MISS {
    bullet,  // fast, straight shot
    grenade,  // slower, sloped trajectory, small aof
    rocket, // acceleration, large AoF
    blade,  // 3 ricochets
    laser,  // light speed
    energy,  // homing
    piercer,  // no collisions (except for shield)  
    LAST
}

global.player_colors[0] = c_lime;
global.player_colors[1] = c_aqua;
global.player_colors[2] = c_fuchsia;
global.player_colors[3] = c_yellow;

enum PLR {
    color_index,
    pad_num,
    kills,
    deaths,
    score,
    LAST
}
global.num_players = 2;
global.num_players_max = 4;

score_alpha_min = 0.4;
for (var i = 0; i &lt; global.num_players; i++) {
    score_alphas[i] = score_alpha_min;
}

global.default_screen_shake_fade_rate = 0.1;
shaking = false;
shake_amount = 0;
shake_fade_rate = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn players &amp; controller objects

// Particle controller
instance_create(0, 0, o_part_ctrl);

var player;
var player_num = 0;

with (o_spawn_player_init) {
    // populate players array with initial stats
    global.players[player_num, PLR.color_index] = player_num;  // TODO: let them choose
    global.players[player_num, PLR.pad_num] = global.pad_num_free++;
    global.players[player_num, PLR.kills] = 0;
    global.players[player_num, PLR.deaths] = 0;
    global.players[player_num, PLR.score] = 0;
    // instantiate player objects
    player = instance_create(x, y, o_player);
    player.number = player_num;
    player.x_scale = iif(player.x &lt; room_width/2, 1, -1);
    player.color = global.player_colors[global.players[player_num, PLR.color_index]];
    player.pad_num = global.players[player_num, PLR.pad_num];
    player_num++;
    // particles
    particle_burst(o_part_ctrl.type_missile_hit, 100, player.color, 360, player.x, player.y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up

surface_free(global.surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// shaking = false;

shaking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Re-Spawn Player 2

respawn_player(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Re-Spawn Player 1

respawn_player(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fullscreen, Restart, End

if (keyboard_check_pressed(ord("R"))) {
    game_restart();
}

if (keyboard_check_pressed(ord("F"))) {
    window_set_fullscreen(!window_get_fullscreen());
}

if (keyboard_check_pressed(vk_escape)) {
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Return to default room_speed
/*
if (room_speed &lt; 60) {
    room_speed++;
}
else {
    room_speed = 60;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Screen Shake

view_xview = 0;
view_yview = 0;

if (shaking) {
    view_xview += random(shake_amount) - shake_amount/2;
    view_yview += random(shake_amount) - shake_amount/2;
    shake_amount = lerp(shake_amount, 0, shake_fade_rate);
    if (shake_amount == 0) {
        shaking = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FPS

draw_set_alpha(0.5);
draw_set_colour(c_white);
draw_rectangle(0, 0, 165, 60, false);

text = "FPS: " + string(fps) + "#";
text += "Real FPS: " + string(fps_real) + "#";
text += "Instance Count: " + string(instance_count) + "#";
draw_set_colour(c_red);
draw_set_font(font_debug);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_alpha(1);
draw_text(0, 0, text);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scoreboard

draw_set_font(font_score);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
for (var i = 0; i &lt; global.num_players; i++) {
    draw_set_alpha(score_alphas[i]);
    draw_set_colour(global.player_colors[global.players[i, PLR.color_index]]);
    // The next line will have to change for more than 2 players
    draw_text(abs((room_width * i) - room_width/4), room_height/2, global.players[i, PLR.score]);
    if (score_alphas[i] &gt; score_alpha_min) {
        score_alphas[i] -= 0.05;
    }
    else {
        score_alphas[i] = score_alpha_min;
    }
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Surface

if (surface_exists(global.surf)) {
    draw_surface(global.surf, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
