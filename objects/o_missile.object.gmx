<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_missile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = MISS.bullet;
owner_num = -1;
has_collided = false;
collision_dir = 0;
force = 0;

image_speed = 0;
color = c_white;
draw_self_sprite = true;
destruct_alarm_set = false;

spin = 0;
explosion_radius = 0;

sound_played = false;

// laser
x_laser_start = x - lengthdir_x(8, direction);
y_laser_start = y - lengthdir_y(8, direction);
x_laser_end = x_laser_start;
y_laser_end = y_laser_start;
laser_dist_check = 0;
laser_width = 6;
laser_alpha = 1;

// blade
blade_ricochets = 0;
blade_ricochets_max = 5;

// energy
energy_locked = false;
energy_nearest_target = -1;
energy_turn_speed = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If within room
if (x &gt; 0 &amp;&amp; x &lt; room_width &amp;&amp; y &gt; 0 &amp;&amp; y &lt; room_height) {
    
    // Default missile impact particle effect
    if (type != MISS.laser &amp;&amp; type != MISS.energy) {
        particle_burst(o_part_ctrl.type_missile_hit, 50, color, 360, x, y);
        particle_burst(o_part_ctrl.type_missile_hit, 50, color, direction, x, y);
    }
    
    // Energy missile particle effect
    if (type == MISS.energy) {
        particle_burst(o_part_ctrl.type_energy_hit, 500, color, 360, x, y);
        audio_stop_sound(snd_fire_energy);
    }
    
    // Play Sound
    if (type != MISS.laser) {
        audio_play_sound(snd_missile_impact, 0, false);
    }
    
    // Create Explosion
    if (explosion_radius != 0) {
        with (instance_create(x, y, o_explosion)) {
            radius = other.explosion_radius;
            owner_num = other.owner_num;
            color = other.color;
        }
        
        // destroy
        var players = collision_circle_mult(x, y, explosion_radius, o_player, true, false);
        if (players[0] &gt; 0) {
            for (var i = 1; i &lt; players[0] + 1; i++) {
                if (players[i].number != owner_num) {
                    with (players[i]) {
                        missile_x = other.x;
                        missile_y = other.y;
                        missile_force = other.force;
                        instance_destroy();
                    }
                }
            }
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Behavior

// Spin
if (spin != 0) {
    image_angle += spin;
}
else {
    image_angle = direction;
}

// type specific
switch(type) {
    case MISS.rocket:
        // Thrust particles
        particle_burst(o_part_ctrl.type_thrust, 3, color, direction - 180, x, y);
        break;
    case MISS.energy:
        // Homing
        if (!energy_locked) {
        with (o_player) {
                if (number != other.owner_num &amp;&amp; point_distance(x, y, other.x, other.y) &lt; 100) {
                    other.energy_nearest_target = id;
                    other.energy_locked = true;
                }
            }
        }
        else {
            var dir = point_direction(x, y, energy_nearest_target.x, energy_nearest_target.y);
            direction = angle_approach(direction, dir, energy_turn_speed);
        }
        // Change sound pitch
        audio_sound_pitch(snd_fire_energy, 1 + random_range(-0.4, 0.4));
        break;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision-Based Behavior

if (!has_collided) { 
    switch(type) {
        case MISS.laser:
            handle_laser_collision()
            break;
        case MISS.piercer:
            handle_piercer_collision()
            break;
        case MISS.blade:
            handle_blade_collision();
            break;
        default:
            handle_missile_collision();
            break;       
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If out of room

if (!destruct_alarm_set &amp;&amp; (x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height)) {
    alarm[0] = room_speed;
    destruct_alarm_set = true;
    if (type == MISS.energy) {
        audio_stop_sound(snd_fire_energy);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play sound

if (!sound_played) {
    sound_played = true;
    switch(type) {
        case MISS.laser:
            audio_play_sound(snd_fire_laser, 0, false);
            break;
        case MISS.rocket:
            audio_play_sound(snd_fire_rocket, 0, false);
            break;
        case MISS.blade:
            audio_play_sound(snd_fire_blade, 0, false);
            break;
        case MISS.energy:
            audio_play_sound(snd_fire_energy, 0, true);  // loops
            break;
    }
}

// Piercer sound (play at every step)
if (type == MISS.piercer &amp;&amp; x &gt; 0 &amp;&amp; x &lt; room_width &amp;&amp; y &gt; 0 &amp;&amp; y &lt; room_height) {
    audio_sound_gain(snd_missile_pierce, 0.01, 0);
    audio_play_sound(snd_missile_pierce, 0, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (type == MISS.laser) {
    // draw laser
    draw_set_color(color);
    draw_set_alpha(laser_alpha);
    draw_line_width(x_laser_start, y_laser_start, x_laser_end, y_laser_end, laser_width);
    draw_set_color(c_white);
    draw_line_width(x_laser_start, y_laser_start, x_laser_end, y_laser_end, laser_width/2);
    draw_set_alpha(1);
    laser_alpha -= 0.05;
    laser_width -= 0.5;
    if (laser_width &lt;= 0) {
        instance_destroy();
    }
}
else {
    // draw trail
    var trail_width;
    if (type == MISS.piercer) {
        trail_width = 6;
    }
    else {
        trail_width = 8;
    }
    var trail_alpha;
    if (type == MISS.blade) {
        trail_alpha = 0.2;
    }
    else {
        trail_alpha = 0.4;
    }
    draw_trail(10, trail_width, color, -1, true, trail_alpha);
    // draw missile
    var scale = 1;
    if (type == MISS.energy) {
        scale = random_range(0, 1.5);
    }
    draw_sprite_ext(sprite_index, image_index, x, y, scale, scale, image_angle, color, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
